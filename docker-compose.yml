
services:
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: tv_shows_api_development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: 
      context: .
      dockerfile: Dockerfile
      target: build
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://postgres:password@db:5432/tv_shows_api_development
      REDIS_URL: redis://redis:6379/0
      RAILS_ENV: development
      BUNDLE_WITHOUT: ""
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/rails
    working_dir: /rails
    command: >
      bash -c "
        bundle exec rails db:create db:migrate &&
        bundle exec rails server -b 0.0.0.0 -p 3000
      "

  sidekiq:
    build: 
      context: .
      dockerfile: Dockerfile
      target: build
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:password@db:5432/tv_shows_api_development
      REDIS_URL: redis://redis:6379/0
      RAILS_ENV: development
      BUNDLE_WITHOUT: ""
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/rails
    working_dir: /rails
    command: bundle exec sidekiq

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      VITE_API_BASE_URL: http://localhost:3000
    depends_on:
      - web
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # One-time data import service
  import:
    build: 
      context: .
      dockerfile: Dockerfile
      target: build
    environment:
      DATABASE_URL: postgresql://postgres:password@db:5432/tv_shows_api_development
      REDIS_URL: redis://redis:6379/0
      RAILS_ENV: development
      BUNDLE_WITHOUT: ""
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/rails
    working_dir: /rails
    command: >
      bash -c "
        echo 'Waiting for web service to initialize database...' &&
        sleep 30 &&
        bundle exec rails runner 'TvmazeImportService.new.import_upcoming_episodes(days: 30)'
      "
    profiles:
      - import

volumes:
  postgres_data:
  redis_data: